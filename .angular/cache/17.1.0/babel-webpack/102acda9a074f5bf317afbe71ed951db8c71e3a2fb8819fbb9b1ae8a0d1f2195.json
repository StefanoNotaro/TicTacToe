{"ast":null,"code":"import { Player } from '../common/enums/player.enum';\nimport { Difficulty } from '../common/enums/difficulty.enum';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"../square/square.component\";\nfunction BoardComponent_h1_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h1\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\"Current player: \", ctx_r0.getPlayer, \"\");\n  }\n}\nfunction BoardComponent_h1_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h1\");\n    i0.ɵɵtext(1, \"Game ended in draw!\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction BoardComponent_h2_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h2\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\"Player \", ctx_r2.winner, \" won the game!\");\n  }\n}\nfunction BoardComponent_app_square_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"app-square\", 5);\n    i0.ɵɵlistener(\"click\", function BoardComponent_app_square_6_Template_app_square_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r8);\n      const i_r6 = restoredCtx.index;\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.makeMove(i_r6));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const value_r5 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", value_r5);\n  }\n}\nconst _c0 = a0 => ({\n  active: a0\n});\nfunction BoardComponent_button_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 6);\n    i0.ɵɵlistener(\"click\", function BoardComponent_button_8_Template_button_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const difficulty_r9 = restoredCtx.$implicit;\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.onDifficultyClick(difficulty_r9));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const difficulty_r9 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(2, _c0, difficulty_r9.isSelected));\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", difficulty_r9.difficulty, \" \");\n  }\n}\nexport class BoardComponent {\n  get difficulty() {\n    return this.difficulties.find(x => x.isSelected)?.difficulty ?? Difficulty.Easy;\n  }\n  get getPlayer() {\n    return this.xIsNext ? Player.X : Player.O;\n  }\n  constructor() {\n    this.gameEnded = false;\n    this.difficulties = [];\n    this.winnerLines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n  }\n  ngOnInit() {\n    this.startNewGame();\n    this.difficulties = Object.keys(Difficulty).map(key => {\n      return {\n        difficulty: key,\n        isSelected: key === Difficulty.Easy\n      };\n    });\n  }\n  startNewGame() {\n    this.squares = new Array(9).fill({\n      disabled: false,\n      index: 0\n    }).map((_, index) => ({\n      disabled: false,\n      index\n    }));\n    this.xIsNext = false;\n    this.winner = '';\n  }\n  makeMove(index) {\n    if (!this.squares[index].value) {\n      this.squares.splice(index, 1, {\n        disabled: true,\n        value: this.getPlayer,\n        index\n      });\n      this.xIsNext = !this.xIsNext;\n    }\n    this.winner = this.calculateWinner();\n    if (this.winner === '' && this.xIsNext && this.squares.some(x => !x.value)) {\n      this.makeAutomaticMove();\n      this.winner = this.calculateWinner();\n    }\n  }\n  makeAutomaticMove() {\n    this.makeMove(this.getNextMovementPosition());\n  }\n  shouldUseRandomMove() {\n    switch (this.difficulty) {\n      case Difficulty.Medium:\n        return Math.random() > 0.5;\n      case Difficulty.Hard:\n        return false;\n      case Difficulty.Easy:\n      default:\n        return true;\n    }\n  }\n  getNextMovementPosition() {\n    return this.shouldUseRandomMove() ? this.getRandomEmptySquare() : this.getBlockingPosition();\n  }\n  getBlockingPosition() {\n    const opponentPositions = this.squares.filter(x => x.value === (this.xIsNext ? Player.O : Player.X));\n    const opponentPositionsIndexes = opponentPositions.map(x => x.index);\n    const lineToBlock = this.winnerLines.find(x => {\n      const possibleMovement = x.filter(y => opponentPositionsIndexes.indexOf(y) !== -1);\n      return possibleMovement?.length === 2 && x.some(y => !this.squares[y].value);\n    });\n    const blockingPosition = lineToBlock?.find(x => !this.squares[x]?.value) ?? -1;\n    if (blockingPosition !== -1) {\n      return blockingPosition;\n    }\n    return this.getRandomEmptySquare();\n  }\n  getRandomEmptySquare() {\n    const emptySquares = this.getEmptyPositions();\n    return emptySquares[Math.floor(Math.random() * emptySquares.length)].index;\n  }\n  getEmptyPositions() {\n    return this.squares.filter(x => !x.value);\n  }\n  calculateWinner() {\n    this.gameEnded = this.squares.filter(x => !x.disabled).length === 0;\n    for (const iterator of this.winnerLines) {\n      const [a, b, c] = iterator;\n      if (this.squares[a].value && this.squares[a].value === this.squares[b].value && this.squares[a].value === this.squares[c].value) {\n        this.gameEnded = true;\n        this.disableSquares();\n        return this.squares[a].value;\n      }\n    }\n    return '';\n  }\n  disableSquares() {\n    this.squares.forEach(x => x.disabled = true);\n  }\n  onDifficultyClick(difficulty) {\n    this.difficulties.forEach(x => x.isSelected = x.difficulty === difficulty.difficulty);\n  }\n  static #_ = this.ɵfac = function BoardComponent_Factory(t) {\n    return new (t || BoardComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: BoardComponent,\n    selectors: [[\"app-board\"]],\n    decls: 12,\n    vars: 8,\n    consts: [[4, \"ngIf\"], [\"type\", \"button\", \"aria-label\", \"Start new game\", 1, \"btn\", \"btn-primary\", 3, \"click\"], [3, \"value\", \"click\", 4, \"ngFor\", \"ngForOf\"], [\"role\", \"group\", \"aria-label\", \"Difficulties group\", 1, \"btn-group\"], [\"type\", \"button\", \"class\", \"btn btn-outline-primary\", 3, \"ngClass\", \"click\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\", \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-outline-primary\", 3, \"ngClass\", \"click\"]],\n    template: function BoardComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, BoardComponent_h1_0_Template, 2, 1, \"h1\", 0)(1, BoardComponent_h1_1_Template, 2, 0, \"h1\", 0);\n        i0.ɵɵelementStart(2, \"button\", 1);\n        i0.ɵɵlistener(\"click\", function BoardComponent_Template_button_click_2_listener() {\n          return ctx.startNewGame();\n        });\n        i0.ɵɵtext(3, \" Start new game\\n\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(4, BoardComponent_h2_4_Template, 2, 1, \"h2\", 0);\n        i0.ɵɵelementStart(5, \"main\");\n        i0.ɵɵtemplate(6, BoardComponent_app_square_6_Template, 1, 1, \"app-square\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 3);\n        i0.ɵɵtemplate(8, BoardComponent_button_8_Template, 2, 4, \"button\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"pre\");\n        i0.ɵɵtext(10);\n        i0.ɵɵpipe(11, \"json\");\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", !ctx.gameEnded || ctx.winner);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.gameEnded && !ctx.winner);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.winner);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.squares);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.difficulties);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(11, 6, ctx.difficulties));\n      }\n    },\n    dependencies: [i1.NgClass, i1.NgForOf, i1.NgIf, i2.SquareComponent, i1.JsonPipe],\n    styles: [\"[_nghost-%COMP%] {\\n  --square-size: 100px;\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n  row-gap: 2rem;\\n}\\n\\nh1[_ngcontent-%COMP%], h2[_ngcontent-%COMP%] {\\n  margin: 0;\\n}\\n\\nmain[_ngcontent-%COMP%] {\\n  display: grid;\\n  grid-template-columns: var(--square-size) var(--square-size) var(--square-size);\\n  grid-gap: 0;\\n  box-shadow: 0 0 5px 0 white;\\n}\\n\\napp-square[_ngcontent-%COMP%] {\\n  height: var(--square-size);\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYm9hcmQvYm9hcmQuY29tcG9uZW50LnNjc3MiLCJ3ZWJwYWNrOi8vLi8uLi8uLi8uLi9Db2RlJTIwUmVwb3NpdG9yaWVzL0dpdGh1Yi9UaWNUYWNUb2Uvc3JjL2FwcC9ib2FyZC9ib2FyZC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLG9CQUFBO0VBQ0EsYUFBQTtFQUNBLHNCQUFBO0VBQ0EsbUJBQUE7RUFDQSxhQUFBO0FDQ0Y7O0FERUE7O0VBRUUsU0FBQTtBQ0NGOztBREVBO0VBQ0UsYUFBQTtFQUNBLCtFQUFBO0VBQ0EsV0FBQTtFQUNBLDJCQUFBO0FDQ0Y7O0FERUE7RUFDRSwwQkFBQTtBQ0NGIiwic291cmNlc0NvbnRlbnQiOlsiOmhvc3Qge1xyXG4gIC0tc3F1YXJlLXNpemU6IDEwMHB4O1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIHJvdy1nYXA6IDJyZW07XHJcbn1cclxuXHJcbmgxLFxyXG5oMiB7XHJcbiAgbWFyZ2luOiAwO1xyXG59XHJcblxyXG5tYWluIHtcclxuICBkaXNwbGF5OiBncmlkO1xyXG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogdmFyKC0tc3F1YXJlLXNpemUpIHZhcigtLXNxdWFyZS1zaXplKSB2YXIoLS1zcXVhcmUtc2l6ZSk7XHJcbiAgZ3JpZC1nYXA6IDA7XHJcbiAgYm94LXNoYWRvdzogMCAwIDVweCAwIHdoaXRlO1xyXG59XHJcblxyXG5hcHAtc3F1YXJlIHtcclxuICBoZWlnaHQ6IHZhcigtLXNxdWFyZS1zaXplKTtcclxufVxyXG4iLCI6aG9zdCB7XG4gIC0tc3F1YXJlLXNpemU6IDEwMHB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICByb3ctZ2FwOiAycmVtO1xufVxuXG5oMSxcbmgyIHtcbiAgbWFyZ2luOiAwO1xufVxuXG5tYWluIHtcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiB2YXIoLS1zcXVhcmUtc2l6ZSkgdmFyKC0tc3F1YXJlLXNpemUpIHZhcigtLXNxdWFyZS1zaXplKTtcbiAgZ3JpZC1nYXA6IDA7XG4gIGJveC1zaGFkb3c6IDAgMCA1cHggMCB3aGl0ZTtcbn1cblxuYXBwLXNxdWFyZSB7XG4gIGhlaWdodDogdmFyKC0tc3F1YXJlLXNpemUpO1xufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}","map":{"version":3,"names":["Player","Difficulty","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","ctx_r0","getPlayer","ctx_r2","winner","ɵɵlistener","BoardComponent_app_square_6_Template_app_square_click_0_listener","restoredCtx","ɵɵrestoreView","_r8","i_r6","index","ctx_r7","ɵɵnextContext","ɵɵresetView","makeMove","ɵɵproperty","value_r5","BoardComponent_button_8_Template_button_click_0_listener","_r11","difficulty_r9","$implicit","ctx_r10","onDifficultyClick","ɵɵpureFunction1","_c0","isSelected","difficulty","BoardComponent","difficulties","find","x","Easy","xIsNext","X","O","constructor","gameEnded","winnerLines","ngOnInit","startNewGame","Object","keys","map","key","squares","Array","fill","disabled","_","value","splice","calculateWinner","some","makeAutomaticMove","getNextMovementPosition","shouldUseRandomMove","Medium","Math","random","Hard","getRandomEmptySquare","getBlockingPosition","opponentPositions","filter","opponentPositionsIndexes","lineToBlock","possibleMovement","y","indexOf","length","blockingPosition","emptySquares","getEmptyPositions","floor","iterator","a","b","c","disableSquares","forEach","_2","selectors","decls","vars","consts","template","BoardComponent_Template","rf","ctx","ɵɵtemplate","BoardComponent_h1_0_Template","BoardComponent_h1_1_Template","BoardComponent_Template_button_click_2_listener","BoardComponent_h2_4_Template","BoardComponent_app_square_6_Template","BoardComponent_button_8_Template","ɵɵtextInterpolate","ɵɵpipeBind1"],"sources":["C:\\Users\\stefa\\OneDrive\\Documentos\\Code Repositories\\Github\\TicTacToe\\src\\app\\board\\board.component.ts","C:\\Users\\stefa\\OneDrive\\Documentos\\Code Repositories\\Github\\TicTacToe\\src\\app\\board\\board.component.html"],"sourcesContent":["import {Component, OnInit} from '@angular/core';\r\nimport {ISquare} from '../common/interfaces/square.interface';\r\nimport {Player} from '../common/enums/player.enum';\r\nimport {Difficulty} from '../common/enums/difficulty.enum';\r\nimport {IDifficulty} from \"../common/interfaces/difficulty.interface\";\r\n\r\n@Component({\r\n  selector: 'app-board',\r\n  templateUrl: './board.component.html',\r\n  styleUrls: ['./board.component.scss']\r\n})\r\nexport class BoardComponent implements OnInit {\r\n  public squares!: ISquare[];\r\n  public gameEnded = false;\r\n  public xIsNext!: boolean;\r\n  public winner!: string;\r\n  public difficulties: IDifficulty[] = [];\r\n  private readonly winnerLines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n\r\n  public get difficulty(): Difficulty { return this.difficulties.find(x => x.isSelected)?.difficulty ?? Difficulty.Easy; }\r\n  public get getPlayer(): Player { return this.xIsNext ? Player.X : Player.O; }\r\n\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.startNewGame();\r\n    type lala = keyof Difficulty;\r\n    this.difficulties = Object.keys(Difficulty).map(key => {\r\n      return {\r\n        difficulty: key as Difficulty,\r\n        isSelected: key === Difficulty.Easy\r\n      };\r\n    });\r\n  }\r\n\r\n  public startNewGame(): void {\r\n    this.squares = new Array<ISquare>(9)\r\n      .fill({disabled: false, index: 0})\r\n      .map((_, index) => ({disabled: false, index}));\r\n    this.xIsNext = false;\r\n    this.winner = '';\r\n  }\r\n\r\n  public makeMove(index: number): void {\r\n    if (!this.squares[index].value) {\r\n      this.squares.splice(index, 1, {disabled: true, value: this.getPlayer, index});\r\n      this.xIsNext = !this.xIsNext;\r\n    }\r\n\r\n    this.winner = this.calculateWinner();\r\n    if (this.winner === '' && this.xIsNext && this.squares.some(x => !x.value)) {\r\n      this.makeAutomaticMove();\r\n      this.winner = this.calculateWinner();\r\n    }\r\n\r\n  }\r\n\r\n  private makeAutomaticMove(): void {\r\n    this.makeMove(this.getNextMovementPosition());\r\n  }\r\n\r\n  private shouldUseRandomMove(): boolean {\r\n    switch (this.difficulty) {\r\n      case Difficulty.Medium:\r\n        return Math.random() > 0.5;\r\n      case Difficulty.Hard:\r\n        return false;\r\n      case Difficulty.Easy:\r\n      default:\r\n        return true;\r\n    }\r\n  }\r\n\r\n  private getNextMovementPosition(): number {\r\n    return  this.shouldUseRandomMove() ? this.getRandomEmptySquare() : this.getBlockingPosition();\r\n  }\r\n\r\n  private getBlockingPosition(): number {\r\n    const opponentPositions = this.squares.filter(x => x.value === (this.xIsNext ? Player.O : Player.X));\r\n    const opponentPositionsIndexes = opponentPositions.map(x => x.index);\r\n\r\n    const lineToBlock = this.winnerLines.find(x => {\r\n      const possibleMovement = x.filter(y => opponentPositionsIndexes.indexOf(y) !== -1);\r\n      return possibleMovement?.length === 2 && x.some(y => !this.squares[y].value);\r\n    });\r\n\r\n    const blockingPosition = lineToBlock?.find(x => !this.squares[x]?.value) ?? -1;\r\n\r\n    if (blockingPosition !== -1) {\r\n      return blockingPosition;\r\n    }\r\n\r\n    return this.getRandomEmptySquare();\r\n  }\r\n\r\n  private getRandomEmptySquare(): number {\r\n    const emptySquares = this.getEmptyPositions();\r\n    return emptySquares[Math.floor(Math.random() * emptySquares.length)].index;\r\n  }\r\n\r\n  private getEmptyPositions(): ISquare[] {\r\n    return this.squares.filter(x => !x.value);\r\n  }\r\n\r\n  private calculateWinner(): string {\r\n    this.gameEnded = this.squares.filter(x => !x.disabled).length === 0;\r\n    for (const iterator of this.winnerLines) {\r\n      const [a, b, c] = iterator;\r\n      if (this.squares[a].value &&\r\n        this.squares[a].value === this.squares[b].value &&\r\n        this.squares[a].value === this.squares[c].value) {\r\n        this.gameEnded = true;\r\n        this.disableSquares();\r\n        return this.squares[a].value as Player;\r\n      }\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\n  private disableSquares(): void {\r\n    this.squares.forEach(x => x.disabled = true);\r\n  }\r\n\r\n  public onDifficultyClick(difficulty: IDifficulty): void {\r\n    this.difficulties.forEach(x => x.isSelected = x.difficulty === difficulty.difficulty);\r\n  }\r\n}\r\n","<h1 *ngIf=\"!gameEnded || winner\">Current player: {{ getPlayer }}</h1>\r\n<h1 *ngIf=\"gameEnded && !winner\">Game ended in draw!</h1>\r\n\r\n<button type=\"button\" aria-label=\"Start new game\" class=\"btn btn-primary\" (click)=\"startNewGame()\">\r\n  Start new game\r\n</button>\r\n\r\n<h2 *ngIf=\"winner\">Player {{ winner }} won the game!</h2>\r\n\r\n<main>\r\n  <app-square *ngFor=\"let value of squares; let i = index;\" [value]=\"value\" (click)=\"makeMove(i)\">\r\n  </app-square>\r\n</main>\r\n\r\n<div class=\"btn-group\" role=\"group\" aria-label=\"Difficulties group\">\r\n  <button type=\"button\" *ngFor=\"let difficulty of difficulties\" class=\"btn btn-outline-primary\" [ngClass]=\"{ active: difficulty.isSelected }\" (click)=\"onDifficultyClick(difficulty)\">\r\n    {{ difficulty.difficulty }}\r\n  </button>\r\n</div>\r\n\r\n<pre>{{ difficulties|json }}</pre>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}